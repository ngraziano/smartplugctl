#!/usr/bin/env python

# smartPlug AWOX control with Bluez
#
# Control an AWOX smartPlug (BLE electrical plug with relay) from command line
# sample: './smart_plug_ctl.py 98:7B:F3:34:78:52 on' to turn on the plug
#
# needs: bluez and python bluepy module
#
# license: MIT

from __future__ import print_function
import sys
import argparse
import pprint
from pySmartPlugSmpB16 import SmartPlug, btle

# parse args
parser = argparse.ArgumentParser()
parser.add_argument('ble_addr', type=str, 
                    help='plug bluetooth LE address (like 98:7b:f3:34:78:52)')
parser.add_argument('command', type=str, choices=['on', 'off', 'status', 'read_programs', 'history_hour', 'history_day', 'program_enable', 'program_update'],
                    help='command to send at plug')
parser.add_argument('remainder', nargs=argparse.REMAINDER)
args = parser.parse_args()

# connect to the plug (BLE connect)
try:
    plug = SmartPlug(args.ble_addr)
except btle.BTLEException as err:
    sys.exit('error when connect to %s (code %d)' % (args.ble_addr, err.code))

# set plug on/off
if args.command == 'on':
    try:
        is_ok = plug.on()
    except btle.BTLEException as err:
        sys.exit('error when setting plug %s on (code %d)' % (args.ble_addr, err.code))
    if is_ok:
        print('smartPlug is set on')
    else:
        sys.exit('unable to set smartPlug on')
elif args.command == 'off':
    try:
        is_ok = plug.off()
    except btle.BTLEException as err:
        sys.exit('error when setting plug %s off (code %d)' % (args.ble_addr, err.code))
    if is_ok:
        print('smartPlug is set off')
    else:
        sys.exit('unable to set smartPlug off')
elif args.command == 'status':
    try:
        (state, power, voltage) = plug.status_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting stat to plug %s (code %d)' % (args.ble_addr, err.code))
    # print result
    status = 'on' if state else 'off'
    print('plug state   = %s' % status)
    print('plug power   = %d W' % power)
    print('plug voltage = %d V' % voltage)
elif args.command == 'read_programs':
    try:
        (programs) = plug.program_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting program to plug %s (code %d)' % (args.ble_addr, err.code))
    # print result
    print('plug programs : ' )
    pprint.pprint(programs)
elif args.command == 'history_hour':
    try:
        history = plug.power_history_hour_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting power history to plug %s (code %d)' % (args.ble_addr, err.code))
    # print result
    for i, h in enumerate(history):
        print('plug power h-%02u = %d Wh' % (i+1, h))
elif args.command == 'history_day':
    try:
        history = plug.power_history_day_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting power history to plug %s (code %d)' % (args.ble_addr, err.code))
    # print result
    for i, h in enumerate(history):
        print('plug power j-%02u = %d Wh' % (i+1, h))
elif args.command == 'program_enable':
    try:
        (programs) = plug.program_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting program to plug %s (code %d)' % (args.ble_addr, err.code))
    program_number = 0
    if len(args.remainder) > 1:
        program_number = int(args.remainder[1])
    if len(programs) > 0:
        if args.remainder[0] == "on":
            programs[program_number]["flags"] |= 0x80
        else:
            programs[program_number]["flags"] &= 0x7F
    try:
        plug.program_write(programs)
    except btle.BTLEException as err:
        sys.exit('error when requesting program to plug %s (code %d)' % (args.ble_addr, err.code))
elif args.command == 'program_update':
    try:
        (programs) = plug.program_request()
    except btle.BTLEException as err:
        sys.exit('error when requesting program to plug %s (code %d)' % (args.ble_addr, err.code))
    program_number = int(args.remainder[0])
    if args.remainder[1] == '-':
        programs[program_number]["start"] = None
    else:
        programs[program_number]["start"] = args.remainder[1]
    if args.remainder[2] == '-':
        programs[program_number]["end"] = None
    else:
        programs[program_number]["end"] = args.remainder[2]
    try:
        plug.program_write(programs)
    except btle.BTLEException as err:
        sys.exit('error when requesting program to plug %s (code %d)' % (args.ble_addr, err.code))
# disconnect BLE
plug.disconnect()

# exit without error
sys.exit(0)

